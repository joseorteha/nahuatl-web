// routes/notificationRoutes.js - Rutas para el sistema de notificaciones
const express = require('express');
const router = express.Router();
const { authenticateToken } = require('../middleware/auth');
const { NotificationService } = require('../services/notificationService');

const notificationService = new NotificationService();

/**
 * GET /api/notifications - Obtener notificaciones del usuario
 */
router.get('/', authenticateToken, async (req, res) => {
  try {
    const usuarioId = req.userId;
    const limite = parseInt(req.query.limite) || 20;
    const offset = parseInt(req.query.offset) || 0;

    console.log('üìã Obteniendo notificaciones para usuario:', usuarioId);

    const notificaciones = await notificationService.obtenerNotificaciones(usuarioId, limite, offset);
    const noLeidas = await notificationService.contarNoLeidas(usuarioId);

    res.json({
      success: true,
      data: {
        notificaciones,
        total_no_leidas: noLeidas,
        limite,
        offset
      }
    });

  } catch (error) {
    console.error('‚ùå Error obteniendo notificaciones:', error);
    res.status(500).json({
      success: false,
      message: 'Error al obtener notificaciones',
      error: error.message
    });
  }
});

/**
 * GET /api/notifications/count - Contar notificaciones no le√≠das
 */
router.get('/count', authenticateToken, async (req, res) => {
  try {
    const usuarioId = req.userId;
    const noLeidas = await notificationService.contarNoLeidas(usuarioId);

    res.json({
      success: true,
      data: {
        no_leidas: noLeidas
      }
    });

  } catch (error) {
    console.error('‚ùå Error contando notificaciones:', error);
    res.status(500).json({
      success: false,
      message: 'Error al contar notificaciones',
      error: error.message
    });
  }
});

/**
 * PUT /api/notifications/:id/read - Marcar notificaci√≥n como le√≠da
 */
router.put('/:id/read', authenticateToken, async (req, res) => {
  try {
    const usuarioId = req.userId;
    const { id } = req.params;

    console.log('‚úÖ Marcando notificaci√≥n como le√≠da:', id);

    const notificacion = await notificationService.marcarComoLeida(id, usuarioId);

    res.json({
      success: true,
      data: notificacion,
      message: 'Notificaci√≥n marcada como le√≠da'
    });

  } catch (error) {
    console.error('‚ùå Error marcando notificaci√≥n como le√≠da:', error);
    res.status(500).json({
      success: false,
      message: 'Error al marcar notificaci√≥n como le√≠da',
      error: error.message
    });
  }
});

/**
 * PUT /api/notifications/read-all - Marcar todas las notificaciones como le√≠das
 */
router.put('/read-all', authenticateToken, async (req, res) => {
  try {
    const usuarioId = req.userId;

    console.log('‚úÖ Marcando todas las notificaciones como le√≠das para usuario:', usuarioId);

    await notificationService.marcarTodasComoLeidas(usuarioId);

    res.json({
      success: true,
      message: 'Todas las notificaciones marcadas como le√≠das'
    });

  } catch (error) {
    console.error('‚ùå Error marcando todas las notificaciones como le√≠das:', error);
    res.status(500).json({
      success: false,
      message: 'Error al marcar todas las notificaciones como le√≠das',
      error: error.message
    });
  }
});

/**
 * POST /api/notifications/test - Crear notificaci√≥n de prueba (solo desarrollo)
 */
router.post('/test', authenticateToken, async (req, res) => {
  try {
    if (process.env.NODE_ENV === 'production') {
      return res.status(403).json({
        success: false,
        message: 'Endpoint de prueba no disponible en producci√≥n'
      });
    }

    const usuarioId = req.userId;
    const { tipo = 'like_recibido', titulo = 'üß™ Notificaci√≥n de prueba', mensaje = 'Esta es una notificaci√≥n de prueba' } = req.body;

    console.log('üß™ Creando notificaci√≥n de prueba para usuario:', usuarioId);

    const notificacion = await notificationService.crearNotificacion({
      usuario_id: usuarioId,
      tipo: tipo,
      titulo: titulo,
      mensaje: mensaje,
      relacionado_id: null,
      relacionado_tipo: 'test'
    });

    res.json({
      success: true,
      data: notificacion,
      message: 'Notificaci√≥n de prueba creada'
    });

  } catch (error) {
    console.error('‚ùå Error creando notificaci√≥n de prueba:', error);
    res.status(500).json({
      success: false,
      message: 'Error al crear notificaci√≥n de prueba',
      error: error.message
    });
  }
});

module.exports = router;